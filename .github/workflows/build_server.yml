name: Build server

on:
  push:
    branches: [docker, docker-prod]

jobs:
  prepare-env:
    runs-on: ubuntu-latest
    outputs:
      env_tag: ${{ steps.set-tag.outputs.ENV_TAG }}
      compose_file: ${{ steps.set-tag.outputs.COMPOSE_FILE }}
      stack_name: ${{ steps.set-tag.outputs.STACK_NAME }}
    steps:
      - name: Set environment tag
        id: set-tag
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/docker-prod' ]]; then
            echo "ENV_TAG=prod" >> $GITHUB_OUTPUT
            echo "COMPOSE_FILE=docker-compose.prod.yml" >> $GITHUB_OUTPUT
            echo "STACK_NAME=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV_TAG=staging" >> $GITHUB_OUTPUT
            echo "COMPOSE_FILE=docker-compose.staging.yml" >> $GITHUB_OUTPUT
            echo "STACK_NAME=streameth-staging" >> $GITHUB_OUTPUT
          fi
  build-and-push-images:
    needs: prepare-env
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: server
            dockerfile: ./packages/server/src/Dockerfile
          - image: stage-transcriptions
            dockerfile: ./packages/server/workers/stage-transcriptions/Dockerfile
          - image: session-transcriptions
            dockerfile: ./packages/server/workers/session-transcriptions/Dockerfile
          - image: clips
            dockerfile: ./packages/server/workers/clips/Dockerfile
          - image: reel-creator
            dockerfile: ./packages/reel-creator/Dockerfile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image }}-
            ${{ runner.os }}-buildx-
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build and push ${{ matrix.image }}
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/streamethorg/streameth-platform/${{ matrix.image }}:${{ needs.prepare-env.outputs.env_tag }}
            ghcr.io/streamethorg/streameth-platform/${{ matrix.image }}:${{ needs.prepare-env.outputs.env_tag }}-${{ github.sha }}
          file: ${{ matrix.dockerfile }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: [prepare-env, build-and-push-images]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 145.223.118.217 >> ~/.ssh/known_hosts

      - name: Setup Docker context
        run: |
          mkdir -p ~/.docker/contexts
          if [[ ${{ github.ref }} == 'refs/heads/docker-prod' ]]; then
            echo "${{ secrets.DOCKER_CONTEXT_PROD_B64 }}" | base64 -d > ~/.docker/contexts/streameth-prod.tar.gz
            docker context import streameth-prod ~/.docker/contexts/streameth-prod.tar.gz
            docker context use streameth-prod
          else
            echo "${{ secrets.DOCKER_CONTEXT_STAGING_B64 }}" | base64 -d > ~/.docker/contexts/streameth-staging.tar.gz
            docker context import streameth-staging ~/.docker/contexts/streameth-staging.tar.gz
            docker context use streameth-staging
          fi

      - name: Install Python dependencies
        run: pip install PyYAML

      - name: Process and deploy compose file
        run: |
          STACK_NAME="${{ needs.prepare-env.outputs.stack_name }}"
          COMPOSE_FILE="${{ needs.prepare-env.outputs.compose_file }}"
          ENV_TAG="${{ needs.prepare-env.outputs.env_tag }}"
          SHA="${{ github.sha }}"
          
          echo "🔍 Debug: Using stack name: $STACK_NAME"
          echo "🔍 Debug: Using compose file: $COMPOSE_FILE"
          echo "🔍 Debug: Environment tag: $ENV_TAG"
          echo "🔍 Debug: Commit SHA: $SHA"
          
          # First, verify we can pull images on the VPS
          echo "🔍 Verifying images on VPS..."
          ssh streameth@145.223.118.217 "
            echo '🔑 Logging into GitHub Container Registry...' && \
            echo '${{ secrets.TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin && \
            echo '🔍 Attempting to pull server image...' && \
            docker pull ghcr.io/streamethorg/streameth-platform/server:${ENV_TAG}-${SHA}
          "

          # Create Python script to process the YAML
          echo "📝 Creating Python script..."
          cat << EOF > process_compose.py
          import sys
          import yaml
          import os
          
          data = yaml.safe_load(sys.stdin)
          # Remove name property if it exists
          if 'name' in data:
              del data['name']
          
          # Convert depends_on to lists
          for service in data["services"].values():
              if "depends_on" in service:
                  service["depends_on"] = list(service["depends_on"].keys())
          
          yaml.dump(data, sys.stdout, default_flow_style=False)
          EOF
          
          # Process the compose file
          echo "🔄 Processing compose file..."
          if ! docker compose -f $COMPOSE_FILE config | python3 process_compose.py > processed-compose.yml; then
            echo "❌ Failed to process compose file"
            exit 1
          fi
          
          echo "📊 Processed file details:"
          ls -l processed-compose.yml
          echo "📄 First few lines of processed file:"
          head -n 10 processed-compose.yml
          
          verify_image() {
            local image=$1
            local max_attempts=5
            local attempt=1
            local delay=15
            
            while [ $attempt -le $max_attempts ]; do
              echo "🔍 Verifying image (attempt $attempt/$max_attempts): $image"
              if docker pull $image >/dev/null 2>&1; then
                echo "✅ Image exists: $image"
                return 0
              else
                echo "⏳ Image not found, waiting $delay seconds before retry..."
                sleep $delay
                attempt=$((attempt + 1))
              fi
            done
            
            echo "❌ Image not found after $max_attempts attempts: $image"
            return 1
          }
          
          # Verify all images exist before proceeding
          echo "🔍 Verifying all images exist..."
          echo "⏳ Waiting initial 15 seconds for images to be available..."
          sleep 15
          
          failed_verifications=0
          for service in server stage-transcriptions session-transcriptions clips reel-creator; do
            # Verify both tags
            base_image="ghcr.io/streamethorg/streameth-platform/${service}"
            echo "🔍 Verifying images for ${service}..."
            
            # Verify base tag
            if ! verify_image "${base_image}:${ENV_TAG}"; then
              echo "❌ Failed to verify base image: ${base_image}:${ENV_TAG}"
              failed_verifications=$((failed_verifications + 1))
            fi
            
            # Verify SHA tag
            if ! verify_image "${base_image}:${ENV_TAG}-${SHA}"; then
              echo "❌ Failed to verify SHA image: ${base_image}:${ENV_TAG}-${SHA}"
              failed_verifications=$((failed_verifications + 1))
            fi
          done
          
          if [ $failed_verifications -gt 0 ]; then
            echo "❌ Deployment aborted: $failed_verifications image tags failed verification"
            exit 1
          fi
          
          # Deploy function with retry mechanism
          deploy_stack() {
            local attempt=1
            local max_attempts=3
            
            while [ $attempt -le $max_attempts ]; do
              echo "🚀 Deploying stack (attempt $attempt/$max_attempts)..."
              
              if cat processed-compose.yml | ssh streameth@145.223.118.217 "
                set -e
                echo '📝 Writing compose file...' && \
                cat > /home/streameth/streameth/processed-compose.yml && \
                echo '🔑 Logging into GitHub Container Registry...' && \
                echo '${{ secrets.TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin && \
                echo '🚀 Deploying stack...' && \
                docker stack deploy -c /home/streameth/streameth/processed-compose.yml --with-registry-auth $STACK_NAME
              "; then
                echo "✅ Stack deployed successfully"
                return 0
              else
                echo "⚠️ Deployment attempt $attempt failed"
                if [ $attempt -eq $max_attempts ]; then
                  echo "❌ All deployment attempts failed"
                  return 1
                fi
                echo "⏳ Waiting before retry..."
                sleep 16
              fi
              attempt=$((attempt + 1))
            done
          }
          
          # Update service function with retry mechanism
          update_service() {
            local service=$1
            local attempt=1
            local max_attempts=3
            
            while [ $attempt -le $max_attempts ]; do
              echo "🔄 Updating $service (attempt $attempt/$max_attempts)..."
              
              if ssh streameth@145.223.118.217 "
                docker service update \
                  --with-registry-auth \
                  --image ghcr.io/streamethorg/streameth-platform/${service}:${ENV_TAG}-${SHA} \
                  ${STACK_NAME}_${service}
              "; then
                echo "✅ Successfully updated $service"
                return 0
              else
                echo "⚠️ Update attempt $attempt for $service failed"
                if [ $attempt -eq $max_attempts ]; then
                  echo "❌ All update attempts for $service failed"
                  return 1
                fi
                echo "⏳ Waiting before retry..."
                sleep 16
              fi
              attempt=$((attempt + 1))
            done
          }
          
          # Main deployment process
          echo "🚀 Starting deployment process..."
          
          # First deploy the stack
          if ! deploy_stack; then
            echo "❌ Stack deployment failed"
            exit 1
          fi
          
          # Wait for stack to stabilize
          echo "⏳ Waiting for stack to stabilize..."
          sleep 20
          
          # Update each service
          failed_services=()
          for service in server stage-transcriptions session-transcriptions clips reel-creator; do
            if ! update_service $service; then
              failed_services+=($service)
            fi
            sleep 15
          done
          
          # Report results
          if [ ${#failed_services[@]} -eq 0 ]; then
            echo "✅ All services updated successfully"
          else
            echo "⚠️ The following services failed to update:"
            printf '%s\n' "${failed_services[@]}"
            exit 1
          fi
          
          echo "📋 Deployment process completed"

      - name: Deploy router if needed
        if: github.ref == 'refs/heads/docker-prod'
        run: |
          if ! docker stack ls | grep -q "router"; then
            docker stack deploy -c /home/streameth/streameth/docker-compose.router.yml router
          fi

      - name: Cleanup processed compose file
        if: always()
        run: |
          ssh streameth@145.223.118.217 "rm -f /home/streameth/streameth/processed-compose.yml"