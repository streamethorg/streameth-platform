name: Build server

on:
  push:
    branches: [docker, docker-prod]

jobs:
  prepare-env:
    runs-on: ubuntu-latest
    outputs:
      env_tag: ${{ steps.set-tag.outputs.ENV_TAG }}
      compose_file: ${{ steps.set-tag.outputs.COMPOSE_FILE }}
      stack_name: ${{ steps.set-tag.outputs.STACK_NAME }}
    steps:
      - name: Set environment tag
        id: set-tag
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/docker-prod' ]]; then
            echo "ENV_TAG=prod" >> $GITHUB_OUTPUT
            echo "COMPOSE_FILE=docker-compose.prod.yml" >> $GITHUB_OUTPUT
            echo "STACK_NAME=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV_TAG=staging" >> $GITHUB_OUTPUT
            echo "COMPOSE_FILE=docker-compose.staging.yml" >> $GITHUB_OUTPUT
            echo "STACK_NAME=streameth-staging" >> $GITHUB_OUTPUT
          fi

  build-and-push-images:
    needs: prepare-env
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: server
            dockerfile: ./packages/server/src/Dockerfile
          - image: stage-transcriptions
            dockerfile: ./packages/server/workers/stage-transcriptions/Dockerfile
          - image: session-transcriptions
            dockerfile: ./packages/server/workers/session-transcriptions/Dockerfile
          - image: reel-creator
            dockerfile: ./packages/server/reel-creator/Dockerfile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build and push ${{ matrix.image }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/streamethorg/streameth-platform/${{ matrix.image }}:${{ needs.prepare-env.outputs.env_tag }}
            ghcr.io/streamethorg/streameth-platform/${{ matrix.image }}:${{ needs.prepare-env.outputs.env_tag }}-${{ github.sha }}
          file: ${{ matrix.dockerfile }}

  deploy:
    needs: [prepare-env, build-and-push-images]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup SSH key
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 145.223.118.217 >> ~/.ssh/known_hosts

      # Setup Docker context from base64-encoded secret
      - name: Setup Docker context
        run: |
          mkdir -p ~/.docker/contexts
          if [[ ${{ github.ref }} == 'refs/heads/docker-prod' ]]; then
            echo "${{ secrets.DOCKER_CONTEXT_PROD_B64 }}" | base64 -d > ~/.docker/contexts/streameth-prod.tar.gz
            docker context import streameth-prod ~/.docker/contexts/streameth-prod.tar.gz
          else
            echo "${{ secrets.DOCKER_CONTEXT_STAGING_B64 }}" | base64 -d > ~/.docker/contexts/streameth-staging.tar.gz
            docker context import streameth-staging ~/.docker/contexts/streameth-staging.tar.gz
          fi

      # Copy compose files to server
      - name: Copy compose files
        run: |
          scp docker-compose.*.yml streameth@145.223.118.217:/home/streameth/streameth/

      # Update services based on environment
      - name: Update services
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/docker-prod' ]]; then
            docker context use streameth-prod
            docker service update --with-registry-auth --image ghcr.io/streamethorg/streameth-platform/server:prod-${{ github.sha }} prod_server
            docker service update --with-registry-auth --image ghcr.io/streamethorg/streameth-platform/stage-transcriptions:prod-${{ github.sha }} prod_stage-transcriptions
            docker service update --with-registry-auth --image ghcr.io/streamethorg/streameth-platform/session-transcriptions:prod-${{ github.sha }} prod_session-transcriptions
            docker service update --with-registry-auth --image ghcr.io/streamethorg/streameth-platform/reel-creator:prod-${{ github.sha }} prod_reel-creator
          else
            docker context use streameth-staging
            docker service update --with-registry-auth --image ghcr.io/streamethorg/streameth-platform/server:staging-${{ github.sha }} streameth-staging_server
            docker service update --with-registry-auth --image ghcr.io/streamethorg/streameth-platform/stage-transcriptions:staging-${{ github.sha }} streameth-staging_stage-transcriptions
            docker service update --with-registry-auth --image ghcr.io/streamethorg/streameth-platform/session-transcriptions:staging-${{ github.sha }} streameth-staging_session-transcriptions
            docker service update --with-registry-auth --image ghcr.io/streamethorg/streameth-platform/reel-creator:staging-${{ github.sha }} streameth-staging_reel-creator
          fi

      # Deploy router if it doesn't exist (only needs to be done once)
      - name: Deploy router if needed
        if: github.ref == 'refs/heads/docker-prod'  # Only check/deploy router on prod branch pushes
        run: |
          if ! docker stack ls | grep -q "router"; then
            docker stack deploy -c /home/streameth/streameth/docker-compose.router.yml router
          fi
