name: Build server

on:
  push:
    branches: [docker, docker-prod]

jobs:
  prepare-env:
    runs-on: ubuntu-latest
    outputs:
      env_tag: ${{ steps.set-tag.outputs.ENV_TAG }}
      compose_file: ${{ steps.set-tag.outputs.COMPOSE_FILE }}
      stack_name: ${{ steps.set-tag.outputs.STACK_NAME }}
    steps:
      - name: Set environment tag
        id: set-tag
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/docker-prod' ]]; then
            echo "ENV_TAG=prod" >> $GITHUB_OUTPUT
            echo "COMPOSE_FILE=docker-compose.prod.yml" >> $GITHUB_OUTPUT
            echo "STACK_NAME=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV_TAG=staging" >> $GITHUB_OUTPUT
            echo "COMPOSE_FILE=docker-compose.staging.yml" >> $GITHUB_OUTPUT
            echo "STACK_NAME=streameth-staging" >> $GITHUB_OUTPUT
          fi

  build-and-push-images:
    needs: prepare-env
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: server
            dockerfile: ./packages/server/src/Dockerfile
          - image: stage-transcriptions
            dockerfile: ./packages/server/workers/stage-transcriptions/Dockerfile
          - image: session-transcriptions
            dockerfile: ./packages/server/workers/session-transcriptions/Dockerfile
          - image: reel-creator
            dockerfile: ./packages/server/reel-creator/Dockerfile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build and push ${{ matrix.image }}
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/streamethorg/streameth-platform/${{ matrix.image }}:${{ needs.prepare-env.outputs.env_tag }}
            ghcr.io/streamethorg/streameth-platform/${{ matrix.image }}:${{ needs.prepare-env.outputs.env_tag }}-${{ github.sha }}
          file: ${{ matrix.dockerfile }}

      - name: Verify image
        run: |
          # Wait for image to be available
          for i in {1..5}; do
            if docker pull ghcr.io/streamethorg/streameth-platform/${{ matrix.image }}:${{ needs.prepare-env.outputs.env_tag }}-${{ github.sha }}; then
              echo "Image verified successfully"
              exit 0
            fi
            echo "Waiting for image to be available (attempt $i/5)..."
            sleep 10
          done
          echo "Failed to verify image"
          exit 1

  deploy:
    needs: [prepare-env, build-and-push-images]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup SSH key
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 145.223.118.217 >> ~/.ssh/known_hosts

      # Setup Docker context from base64-encoded secret
      - name: Setup Docker context
        run: |
          mkdir -p ~/.docker/contexts
          if [[ ${{ github.ref }} == 'refs/heads/docker-prod' ]]; then
            echo "${{ secrets.DOCKER_CONTEXT_PROD_B64 }}" | base64 -d > ~/.docker/contexts/streameth-prod.tar.gz
            docker context import streameth-prod ~/.docker/contexts/streameth-prod.tar.gz
            docker context use streameth-prod
          else
            echo "${{ secrets.DOCKER_CONTEXT_STAGING_B64 }}" | base64 -d > ~/.docker/contexts/streameth-staging.tar.gz
            docker context import streameth-staging ~/.docker/contexts/streameth-staging.tar.gz
            docker context use streameth-staging
          fi

      # Copy compose files to server
      - name: Copy compose files
        run: |
          scp docker-compose.*.yml streameth@145.223.118.217:/home/streameth/streameth/

      # Log in to registry on deployment server
      - name: Log in to registry on deployment server
        run: |
          echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Pre-pull images
      - name: Pre-pull images
        run: |
          STACK_NAME="${{ needs.prepare-env.outputs.stack_name }}"
          SHA="${{ github.sha }}"
          ENV_TAG="${{ needs.prepare-env.outputs.env_tag }}"
          
          for service in server stage-transcriptions session-transcriptions reel-creator; do
            echo "Pulling image for $service..."
            docker pull ghcr.io/streamethorg/streameth-platform/$service:$ENV_TAG-$SHA || exit 1
          done

      # Update services based on environment
      - name: Update services
        run: |
          STACK_NAME="${{ needs.prepare-env.outputs.stack_name }}"
          SHA="${{ github.sha }}"
          
          for service in server stage-transcriptions session-transcriptions reel-creator; do
            echo "Updating service ${STACK_NAME}_${service}..."
            docker service update \
              --with-registry-auth \
              --image ghcr.io/streamethorg/streameth-platform/$service:${{ needs.prepare-env.outputs.env_tag }}-$SHA \
              ${STACK_NAME}_${service} || exit 1
            echo "Service ${STACK_NAME}_${service} updated successfully"
          done

      # Deploy router if it doesn't exist (only needs to be done once)
      - name: Deploy router if needed
        if: github.ref == 'refs/heads/docker-prod'  # Only check/deploy router on prod branch pushes
        run: |
          if ! docker stack ls | grep -q "router"; then
            docker stack deploy -c /home/streameth/streameth/docker-compose.router.yml router
          fi
