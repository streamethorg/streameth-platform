{"id":"differential_fuzzing_with_foundry_for_gas_optimization","name":"Differential Fuzzing with Foundry for Gas Optimization","description":"Differential testing using the Foundry fuzzer can be utilized to ensure identical behavior between two implementations of the same contract. Developers can leverage differential fuzzing in their development workflow to transpile idiomatic Solidity into highly gas optimized contracts. We will outline the steps to replicate this development workflow, discuss common “gotchas” and workarounds, and circulate a template repo with example tests in order to empower devs to leverage this process. [detail] During the design process, developers can begin by writing their contract implementation in idiomatic Solidity, enabling quicker development and more intuitive understanding of contract functionality. Next, developers can transpile the reference implementation into a highly optimized version utilizing Yul / Assembly by leveraging `forge inspect ir` and other tools. Finally, developers can use differential fuzzing with Foundry to ensure the equality of the two implementations. The most notable example of this development process is OpenSea’s Seaport contracts.","start":1700134800000,"end":1700136600000,"stageId":"uskudar_2","speakers":[{"id":"anna_carroll","name":"Anna Carroll","bio":"No description","eventId":"solidity_summit","twitter":"@annascarroll","photo":"https://drive.google.com/file/d/1x9rPoj_0eVK6xMhQ6kc7OBv4sQ9cATDX/view?usp=sharing"}],"videoUrl":"EVM Mechanisms & Programming Patterns","eventId":"solidity_summit","coverImage":"/sessions/solidity_summit/differential_fuzzing_with_foundry_for_gas_optimization.jpg"}