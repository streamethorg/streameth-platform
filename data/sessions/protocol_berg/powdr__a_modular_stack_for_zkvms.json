{"id":"powdr__a_modular_stack_for_zkvms","name":"powdr - a modular stack for zkVMs","description":"In the recent months, there has been a surge in the popularity of zkVM implementations. Many of these use specialized solutions and code, sometimes even all the way down to the cryptography, which makes these zkVMs very monolithic and non-interoperable.\r\n\r\nPowdr takes a modular approach to designing and constructing zkVMs, employing multiple compilation and optimization stages to arrive at the final prover and verifier. Users can define custom instruction sets for a VM, specify how those compile to constraints, generate sub-machines and declare how to connect them. Moreover, the flexibility of powdr enables users to select from a variety of proving backends when generating the prover and verifier components.\r\n\r\nTo validate this concept, we have successfully developed a fully functional verifier that compiles (no-std) Rust code into eSTARK and Halo2 proofs via the RISC-V architecture. Additionally, we are currently working on adapting this verifier to wasm and Valida, VMs that take very different architectural approaches than RISC-V.","start":"2023-09-15T11:00:00+02:00","end":"2023-09-15T11:25:00+02:00","stageId":"magazin__main_stage","speakers":[{"id":"christian_reitwiessner","name":"Christian Reitwiessner","bio":"Christian Reitwiessner is widely recognized for his substantial contributions to the Ethereum ecosystem, mainly for developing the smart contract language Solidity and improvements to the Ethereum Virtual Machine. Recently, his focus lies in advancing zero-knowledge technologies, particularly through his work on the powdr project.","eventId":"protocol_berg","photo":"https://speak.protocol.berlin/media/avatars/chris_iUL5pKP.jpeg"}],"playbackId":"","eventId":"protocol_berg","coverImage":"/sessions/protocol_berg/powdr__a_modular_stack_for_zkvms.jpg"}