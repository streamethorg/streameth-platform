{"id":"the_symbolic_solidity_debugger","name":"The Symbolic Solidity Debugger","description":"Problem\nAt Runtime Verification our engineers and auditors noticed a lack of advanced Solidity/EVM debuggers, especially ones that combine the intuitiveness of classical interactive breakpoint-style debugging with the depth of symbolic execution.\nSolution\nTo close this gap, we propose the \"Symbolic Solidity Debugger\", a tool built on top of KEVM and specifically designed to significantly lower the entry barrier for one of Computer Science's most advanced quality assurance techniques.\nWhat to expect\nWhile we want to elevate our audience’s knowledge, we don’t expect any prior knowledge of formal methods or symbolic execution. We've opted into an intuitive user interface that merges seamlessly into VSCode, empowering developers and compiler engineers to start with classical debugging and progressively harness symbolic features' advanced bug-finding capabilities.\nHow the audience benefits\nAs you'd anticipate, our debugger offers all conventional functionalities, from setting breakpoints to stepping through code (both at the Solidity and EVM levels), inspecting variables, and navigating call stacks as well as the entire EVM state. Its symbolic capabilities set our tool apart: it can begin debugging with arbitrary symbolic storage and call data, allowing users to explore the comprehensive branching control flow graph and delve into the conditions assigned to each path. Essentially, debug a function once, and you've probed every potential behavior it could manifest.\nWhat we show\nOur session will exemplify the debugger's core functionalities, focusing on its EVM-level capabilities. Together, we'll uncover how it excels in detecting nuanced bugs, which often elude more traditional methodologies like testing, fuzzing, concrete debugging, and static analysis.","start":1699949700000,"end":1699953300000,"stageId":"emirgan_2","speakers":[{"id":"raoul_schaffranek","name":"Raoul Schaffranek","bio":"Raoul Schaffranek studied Computer Science at RWTH Aachen University, Germany, where he obtained B.Sc. and M.Sc. degrees. He wrote his master thesis about compositional modeling and fully automated verification of distributed systems and formalized his findings with the Isabelle proof assistant. Before joining RV, Raoul worked for more than eight years as a software engineer for the German software company graphodata AG. Raoul considers programming a human-centric rather than machine-centric activity, and he firmly believes that we should build modern programming languages and verification tools upon this perspective.","eventId":"evm_summit","twitter":"","photo":"https://evmsummit.org/images/speakers/raoul_schaffranek.jpg"}],"videoUrl":"Security","eventId":"evm_summit","coverImage":"/sessions/evm_summit/the_symbolic_solidity_debugger.jpg"}